<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL-->
<!--Configuration 后面的 status 用于设置log4j2 自身内部的信息输出，可以不设置，当设置程 trace 时，可以看到 log4j2 内部各种详细输出-->
<configuration status="info">
    <Properties>
        <!-- 日志文件存放路径 -->
        <property name="log_home">com.log</property>
        <!-- 输出日志的格式%highlight{}高亮，%d{HH:mm:ss.SSS}表示输出到毫秒的时间 ;%t输出当前线程名称 ;%-5level输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补空格;
            %logger{36}和%class{3}是输出类型括号中的数字代表包的层级，一次从最深一层往上； %msg日志文本； %n换行；其他常用的占位符有：
            %F 输出所在的类文件名，如Log4j2Test.java；%L输出行号; %M输出所在方法名; %l输出语句所在的行数, 包括类名、方法名、文件名、行数 -->
        <property name="log_pattern">%-5level %d{yyyy-MM-dd HH:mm:ss} [%t] %l - %msg%n</property>
        <!-- 接受的日志级别 :trace：追踪，就是程序推进一下，可以写个trace输出; debug：调试，一般作为最低级别，trace基本不用;
            info：输出重要的信息，使用较多; warn：警告，有些信息不是错误信息，但也要给程序员一些提示; error：错误信息,用的也很多; fatal：致命错误,级别较高，这种级别不用调试了，重写吧…… -->
        <property name="log_level">INFO</property>
    </Properties>


    <!--先定义所有的 appender-->
    <appenders>
        <!--输出日志信息到控制台-->
        <console name="Console" target="SYSTEM_OUT">
            <!--控制日志输出的格式-->
            <!--<PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} -%msg%n"/>-->

            <!-- 控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="${log_pattern}"/>
        </console>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
        <RollingFile name="RollingFile"
                     fileName="${log_home}/platform.log"
                     filePattern="${log_home}/log_%d{yyyy-MM-dd}.log.gz">
            <!-- 只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <Filters>
                <!-- 当匹配到error以及以上级别时，拒绝,当不匹配时，给下一个拦截器处理 -->
                <!-- <ThresholdFilter level="error" onMatch="DENY"
                    onMismatch="NEUTRAL" /> -->
                <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <!-- 这个配置需要和filePattern结合使用，注意filePattern中配置的文件重命名规则是${log_path}/zcrTest%d{yyyy-MM-dd}.log，
                最小的时间粒度是dd，即天，TimeBasedTriggeringPolicy指定的size是1，结合起来就是每一天生成一个新文件。
                如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <!-- 此处为每个文件大小策略限制，使用它一般会在文件中filePattern采用%i模式 -->
                <!-- <SizeBasedTriggeringPolicy size="100M" /> -->
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${log_home}" maxDepth="1">
                    <IfFileName glob="log_*.log.gz"/>
                    <IfLastModified age="60d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
        <RollingFile name="ApiLogFile"
                     fileName="${log_home}/api.log"
                     filePattern="${log_home}/log_%d{yyyy-MM-dd}.log.gz">
            <!-- 只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <Filters>
                <!-- 当匹配到error以及以上级别时，拒绝,当不匹配时，给下一个拦截器处理 -->
                <!-- <ThresholdFilter level="error" onMatch="DENY"
                    onMismatch="NEUTRAL" /> -->
                <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <!-- 这个配置需要和filePattern结合使用，注意filePattern中配置的文件重命名规则是${log_path}/zcrTest%d{yyyy-MM-dd}.log，
                最小的时间粒度是dd，即天，TimeBasedTriggeringPolicy指定的size是1，结合起来就是每一天生成一个新文件。
                如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <!-- 此处为每个文件大小策略限制，使用它一般会在文件中filePattern采用%i模式 -->
                <!-- <SizeBasedTriggeringPolicy size="100M" /> -->
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${log_home}" maxDepth="1">
                    <IfFileName glob="log_*.log.gz"/>
                    <IfLastModified age="60d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
    </appenders>


    <Loggers>

        <!-- additivity="false"表示在该logger中输出的日志不会再延伸到父层logger。 这里如果改为true，则会延伸到Root
            Logger，遵循Root Logger的配置也输出一次 -->
        <Logger name="com.interfaceproject.utils.ExecuteTimeAspect" level="${log_level}" additivity="false">
            <AppenderRef ref="Console"/>
        </Logger>
        <Root level="${log_level}">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="RollingFile"/>
        </Root>
    </Loggers>


    <!--然后定义logger，只有定义了logger 并引入了appender，appender才会生效-->
    <!--root：用于指定项目点的根目录，如果没有单独指定logger，则会使用root 作为默认的日志输出-->
    <!--<loggers>-->
    <!--    <root level="info">-->
    <!--        <appender-ref ref="Console"/>-->
    <!--    </root>-->
    <!--</loggers>-->
    <!--<loggers name="java.sql">-->
    <!--    <level value="debug"/>-->
    <!--</loggers>-->

    <!--<loggers name="org.apache.ibatis">-->
    <!--    <level value="info"/>-->
    <!--</loggers>-->
    <!--<loggers>-->
    <!--    <root level="debug">-->
    <!--        <appender-ref ref="STDOUT"/>-->
    <!--    </root>-->
    <!--</loggers>-->

</configuration>